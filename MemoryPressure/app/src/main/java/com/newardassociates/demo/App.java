/*
 * This source file was generated by the Gradle 'init' task
 */
package com.newardassociates.demo;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;

public class App {
    /**
     * This function just allocates a ton of chunks of memory in an
     * attempt to force the GC to kick in. Note that for a large
     * enough number of CHUNKS, you'll force an OutOfMemoryError
     * and terminate the JVM.
     */
    public static List<Object> createMemoryPressure() {
        System.out.println("Creating memory pressure");

        // You may need to toy with this number below depending on your JVM
        // and -Xms/-Xmx settings; on my machine, for -Xms25m -Xmx25m, 40
        // is sufficient to trigger GC but not terminate the VM.
        int CHUNKS = 40;
        List<Object> unused = new ArrayList<Object>();
        for (int i=0; i<CHUNKS; i++) { unused.add(new byte[100_000]); }
        return unused;
    }

    public static void pause(String message) {
        try {
            System.out.println(message);
            System.in.read();
        }
        catch (java.io.IOException ignored) {
            // *shrug*
        }
    }

    public static void main(String[] args) {
        pause("Connect your profiler/debugger now");

        List<Object> captured = new LinkedList<>();
        while (true) {
            captured.addAll(createMemoryPressure());
            pause("Chunks allocated; press ENTER to continue");
        }
    }
}
